plot(cars$dist~cars$speed,
main = "刹车距离与车速之间的关系",
xlab = "Speed (miles per hour)",
ylab = "Distance travelled (miles)",
xlim = c(0,30),
ylim = c(0,140),
xaxs = "i",
yaxs = "i",
col = "red",
pch = 19)
# 向量####
v <- v(98,78,88)
names(v) <- c("math","java","R")
v
# 向量####
v <- c(98,78,88)
names(v) <- c("math","java","R")
v
print(v["math"])
?as
showMethods("coerce")
d <- as.Date("2017-07-21")
d
mode(d)
length(d)
pi
pi[1]
pi[2]
length(pi)
A <- 1:6
dim(A)
dim(A)<-c(2,3)
A
B <- list(1,2,3,4,5,6)
dim(B)
dim(B) <- c(2,3)
B
D <- 1:12
dim(D)
dim(D) <- c(2,3,2)
D
v
mode(v)
v <- c(1,23)
newitem <- c(2,3)
v <- c(v,newitem)
v
v <- c(1,2,3)
v <- c(v,4)
v
w <- c(v,c(6,7,8,9))
w
years <- list(1960,1967,1999,2001)
years
years[[2]]
years[1]
cat(year[[1]])
cat(years[[1]])
cat(year[1])
cat(years[1])
lst
lst <- list("lwx",NULL,"qjk")
lst
lst[sapply(lst,is.null)] <- NULL
lst
print(tech.corr)
data()
c <- 1:12
c
dim(c) = c(3,4)
c
vec <- c[1,]
vec
vec <- c[,3]
vec
c[1,,drop = FALSE]
c[,3,drop = FALSE]
who
CO2
edit(CO2)
Car93
data()
library(MASS)
Cars93
split(Cars93$MPG.city,Cars93$Origin)
g <- split(Cars93$MPG.city,Cars93$Origin)
median(g[1])
median(g[[1]])
median(g[[2]])
s1 <- c(98,78,97,67,87,56,98,56,76,89)
s2 <- c(97,67,87,59,97,67,87,88)
s3 <- c(78,97,67,87,56,98,56,87,59,97,67,87)
s4 <- c(7,87,56,98,56,87,59,97,67,79)
scores <- list(s1,s2,s3,s4)
scores
lapply(scores,length)
sapply(score)
sapply(scores,length)
names(scores) <- c("S1","S2","S3","S4")
scores
lapply(scores,length)
sapply(scores,length)
sapply(scores,mean)
sapply(scores,sd)
sapply(scores,range)
tests <- lapp
tests <- lapply(scores, t.test)
tests
sapply(tests,function(t) t$conf.int)
length("Moe")
nchar("Moe")
s <- c("Moe","Larry","Curly")
s
length(s)
nchar(s)
paste("I","love","you")
paste("I","love","you",sep = "-")
paste("I","love","you",sep = "")
Sys.Date()
d <- as.Date("2010-03-15")
p <- as.POSIXct(d)
p$mday
p
p$mday
p["mdayt"]
p["mday"]
d$mday
d
p <- as.POSIXlt(d)
p$mday
choose(5,3)
choose(50,3)
combn(1:5,3)
combn(c("T1","T2","T3","T4","T5","T6"),4)
runif(1)
runif(10)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
rnorm(1)
set.seed(199)
runif(10)
set.seed(199)
runif(10)
years
years = 1900:2000
years
years = 1900:2017
years
sample(years,10)
sample(years,10)
sample(years,10,replace = TRUE)
sample(years,10,replace = TRUE)
sample(years,120,replace = TRUE)
sample(years,120)
sample(x, replace = TRUE)
sample(years, replace = TRUE)
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median <- numeric(100)
median
years = 1900:2017
median <- numeric(1000)
for (i in 1:1000){
median[i] <- median(sample(years,replace = TRUE))
}
median
ci <- quantile(median, c(0.025, 0.975))
cat("95% confidece interval is (", ci, ")\n")
sample(set, n, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 20, replace = TRUE)
sample(c(FALSE, TRUE), 20, replace = TRUE)
sample(c(FALSE,TRUE),20, replace = TRUE, prob = c(0.2, 0.8))
sample(1:10)
x <- seq(from=0, to=6, length.out = 100)
ylim <- c(0,0.6)
par(mfrow = c(2,2))
plot(x, dunif(x, min = 2, max = 4), main = "Uniform",type = 'l',ylim = ylim)
plot(x, dnorm(x, mean = 3, sd = 1), main = "Normal",type = 'l',ylim = ylim)
plot(x, dexp(x, rate = 1/2), main = "Exponential",type = 'l',ylim = ylim)
plot(x, dgamma(x, shape = 2, rate = 1), main = "Gamma",type = 'l',ylim = ylim)
x <- rnorm(-10,10)
x <- -100:100
x
list <- sample(x, 20, replace = TRUE)
list
mean(x<0)
x <- rnorm(50,mean = 100, sd =15)
x
t.test(x,mu=95)
t.test(x,mu=97)
t.test(x,mu=1.1)
t.test(x,mu=101)
t.test(x,mu=101.7607)
x
y
s1
s4
plot(s1,s4)
cars
plot(cars)
plot(cars)
plot
plot(cars,)
plot(cars,
main="cars:Speed vs. Stopping Distance(1920)",
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)")
plot(cars,
main="cars:Speed vs. Stopping Distance(1920)",
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)")
plot(cars,
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)"
type="n")
plot(cars,
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)",
type="n")
grid()
points(cars)
iris
with(iris, plot(Petal.Length,Petal.Width))
with(iris, plot(Petal.Length,Petal.Width, pch = as.integer(Species)))
f <- factor(iris$Species)
with(iris, plot(Petal.Length,Petal.Width, pch = as.integer(f)))
legend(1.5,2.4, c("setosa","versicolor","virginica"), pch=1:3)
f <- factor(iris$Species)
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(1.5, 2.4, as.character(levels(f)),pch = as.integer(f))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,95,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,95,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,2.5,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(1.5,2.5,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
with(iris, )
library(faraway)
data(strongx)
install.packages(faraway)
install.packages("faraway")
library(faraway)
data(strongx)
strongx
m <- lm(crossx ~ energy, data = strongx)
plot(
)
plot(crossx ~ energy, data = strongx)
abline(m)
head(iris)
plot(iris[,1:4])
data(Cars93, package = "MASS")
coplot
Cars93
data(Cars93,package = "MASS")
coplot(Horsepower ~ MPG.city | Origin, data=Cars93)
airquality
head(airquality)
heights <- tapply(airquality$Temp,airquality$Month,mean)
heights
barplot(heights)
barplot(heights,
main = "Mean Temp .by Month",
names.arg =c("May","Jun","Jul","Aug","Sep"),
ylab = "Temp(deg.F")
?attach
attach(airquality)
attach(airquality)
airquality
head(airquality)
heights <- tapply(Temp,Month,mean)
heights
lower <- tapply(Temp,Month,function(v) t.test(v)$conf.int[1])
lower
upper <- tapply(Temp,Month,function(v) t.test(v) $conf.int[2])
upper
barplot(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper)
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper)
barplot2
gplots
library(gplot)
library(gplots)
install.packages(gplots)
install.packages("gplots")
library(gplots)
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper)
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper,
ylim = c(50,90),xpd = FALSE,
main = "Mean Temp.By Month",
names.arg = "May","Jun","Jul","Aug","Sep",
ylab = "Temp(deg.F")
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper,
ylim = c(50,90),xpd = FALSE,
main = "Mean Temp.By Month",
names.arg = "May","Jun","Jul","Aug","Sep",
ylab = "Temp(deg.F")
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper,
ylim = c(50,90),xpd = FALSE,
main = "Mean Temp.By Month",
names.arg = "May","Jun","Jul","Aug","Sep",
ylab = "Temp(deg.F)")
barplot2(heights, plot.ci = TRUE, ci.l = lower, ci.u = upper,
ylim = c(50,90),xpd = FALSE,
main = "Mean Temp.By Month",
names.arg = c("May","Jun","Jul","Aug","Sep"),
ylab = "Temp(deg.F)")
barplot(c(3,4,5),col=c("red","white","blue"))
rel.hts <- (heights - min(heights))/(max(heights) - min(heights))
rel.hts
grays <- gray(1 - rel.hts)
barplot(heights,
col = grays,
ylim = c(50,90), xpd = FALSE,
main = "Mean Temp .By Month",
names.arg = c("May","Jun","Jul","Aug","Sep"),
ylab = "Temp (deg.F)")
pressure
plot(pressure)
plot(pressure,type = 'l')
plot(pressure, type = 'l', lty = "dashed")
vplot(pressure, type = 'l', lwd = 2)
plot(pressure, type = 'l', lwd = 2)
data(UScereal, package = "MASS")
boxplot(sugars ~ shelf, data = UScereal)
UScereal
boxplot(sugars ~ shelf, data = UScereal,
main ="Sugar Content by shelf",
xlab = "Shelf", ylab="Sugar (grams per position) ")
data(Cars93, package = "MASS")
Cars93$MPG.city
Cars93
hist(Cars93$MPG.city)
hits(Cars93$MPG.city, 20)
hist(Cars93$MPG.city, 20)
hist(Cars93$MPG.city, 20, main = "City MPG(1993)" xlab="MPG")
hist(Cars93$MPG.city, 20, main = "City MPG(1993)",xlab="MPG")
samp <- rgamma(500,2,2)
hist(samp, 20, prob = T)
lines(density(samp))
x = rnorm(20,mean = 20,sd = 3)
x
plot(table(x), type = "h",lwd = 5, ylab = "Freq")
x = sample(1:100)
x
plot(table(x), type = "h",lwd = 5, ylab = "Freq")
x = sample(1:100,10)
x
plot(table(x), type = "h",lwd = 5, ylab = "Freq")
x = sample(1:100,10)
x/100
plot(table(x), type = "h",lwd = 5, ylab = "Freq")
x = sample(1:100,10)
x
plot(table(x)/length(x), type = "h",lwd = 5, ylab = "Freq")
qqnorm(log(Cars93$Price),main = "Q-Qplot :price")
qqline(log(Cars93$Price))
curve(dnorm, -3.5,+3.5,
main = "Std. Normal Density")
par(mfrow = c(2,2))
hist()
seq(from=0,to=1,length.out = 30)
par(mfrow = c(2,2))
quantile = seq(from =0, to = 1, length.out = 30)
plot(Quantile, dbeta(quantile,2,2), type = 'l',main = "First")
plot(Quantile, dbeta(quantile,4,2), type = 'l',main = "Second")
plot(Quantile, dbeta(quantile,1,1), type = 'l',main = "Thrid")
plot(Quantile, dbeta(quantile,0.5,0.5), type = 'l',main = "Fourth")
par(mfrow = c(2,2))
quantile = seq(from =0, to = 1, length.out = 30)
plot(quantile, dbeta(quantile,2,2), type = 'l',main = "First")
plot(quantile, dbeta(quantile,4,2), type = 'l',main = "Second")
plot(quantile, dbeta(quantile,1,1), type = 'l',main = "Thrid")
plot(quantile, dbeta(quantile,0.5,0.5), type = 'l',main = "Fourth")
x = 1:100
plot(x)
library(zoo)
library(xts)
v <- TRUE
print(class(v))
BMI <- data.frame(
gender = c("Male","Male","Female"),
height = c(152,171,2,165),
weight = c(81,93,78),
Age = c(42,38,26)
)
BMI <- data.frame(
gender = c("Male","Male","Female"),
height = c(152,171.2,165),
weight = c(81,93,78),
Age = c(42,38,26)
)
print(BMI)
print(ls())
library()
search()
# 循环输出
v <- c("Hep","Rovk")
count <- 2
repeat{
print(v)
count <- count +1
if(count>7) {
break
}
}
# create vector objects
city <- c("jinan","beijing","shanghai","taiyuan")
state <- c("shandong","beijing","shanghai","shanxi")
zipcode <- c(54565,34664,24525,24456)
# Combine the three vectors into one data frame
address <- cbind(city,state,zipcode)
# Print a header
cat("#### ","the first data frame")
print(address)
# create another data frame with similar columns
new.address <- data.frame(
city <- c("changsha","tianjin"),
state <- c("hunan","tianjin"),
zipcode <- c(33453,67676),
stringsAsFactors = FALSE
)
# print the header
cat('#### the second data frame')
# print the second data frame
print(new.address)
new.address
new.address <- data.frame(
city = c("changsha","tianjin"),
state = c("hunan","tianjin"),
zipcode = c(33453,67676),
stringsAsFactors = FALSE
)
new.address
library(MASS)
MASS
MASS()
Pima
View(Pima)
Pima.te
Pima.tr
merged.Pima <- merge(x = Pima.te, y = Pima.tr,
by.x = c("bp","bmi"),
by.y = c("bp","bmi"))
print(merged.Pima)
nrow(merged.Pima)
?MASS
??MASS
print(ships)
molten.ships <- melt(ships, id = c("type","year"))
print(molten.ships)
print(ships)
molten.ships <- melt(ships, id = c("type","year"))
print(molten.ships)
?melt
melt()
??melt
library(reshape2)
molten.ships <- melt(ships, id = c("type","year"))
print(molten.ships)
print(seq(12:55))
print(mean(seq(2:9)))
print(sum(1:100))
squre_of_a_number <- function(a) {
print(a^2)
}
print(squre_of_a_number(9))
list_data <- list(c("Jan","Feb","Mar"), matrix(c(1,2,3,6,5,4),nrow = 2,list("green",43.2)))
list_data <- list(c("Jan","Feb","Mar"), matrix(c(1,2,3,6,5,4),nrow = 2,list("green",43.2))
list_data <- list(c("Jan","Feb","Mar"), matrix(c(1,2,3,6,5,4),nrow = 2),list("green",43.2))
list_data
list_data
list_data <- list(c("Jan","Feb","Mar"), matrix(c(1,2,3,6,5,4),nrow = 2),list("green",43.2))
list_data
names(list_data) <- c("1st Quarter","A_matrix","A inner list")
print(list_data[1])
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
