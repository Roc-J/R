x3 = c(10,8,13,9,11,14,6,4,12,7,5),
x4 = c(8,8,8,8,8,8,8,19,8,8,8),
y1 = c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68),
y2 = c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74),
y3 = c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73),
y4 = c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89)
)
# show results from four regression analyses
with(anscombe,print(summary(lm(y1~x1,data = anscombe))))
with(anscombe,print(summary(lm(y2~x2,data = anscombe))))
with(anscombe,print(summary(lm(y3~x3,data = anscombe))))
with(anscombe,print(summary(lm(y4~x4,data = anscombe))))
# place four plots on one page
# width and height is not neccessary
pdf(file = "fig_anscombe_R.pdf",width = 8.5, height = 8.5)
par(mfrow = c(2,2),mar = c(5.1,4.1,4.1,2.1))
with(anscombe, plot(x1,y1,xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x1", ylab = "y1"))
title("Set I")
dev.off()
# 安斯库姆四重奏
#
# define the data frame
anscombe <- data.frame(
x1 = c(10,8,13,9,11,14,6,4,12,7,5),
x2 = c(10,8,13,9,11,14,6,4,12,7,5),
x3 = c(10,8,13,9,11,14,6,4,12,7,5),
x4 = c(8,8,8,8,8,8,8,19,8,8,8),
y1 = c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68),
y2 = c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74),
y3 = c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73),
y4 = c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89)
)
# show results from four regression analyses
with(anscombe,print(summary(lm(y1~x1,data = anscombe))))
with(anscombe,print(summary(lm(y2~x2,data = anscombe))))
with(anscombe,print(summary(lm(y3~x3,data = anscombe))))
with(anscombe,print(summary(lm(y4~x4,data = anscombe))))
# place four plots on one page
# width and height is not neccessary
# pdf(file = "fig_anscombe_R.pdf",width = 8.5, height = 8.5)
par(mfrow = c(2,2),mar = c(5.1,4.1,4.1,2.1))
with(anscombe, plot(x1,y1,xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x1", ylab = "y1"))
title("Set I")
# dev.off()
plot(1:30)
plot(1:30,main=”图形元素设置演示”)
plot(1:30,x,y)
plot(1:30)
plot(1:30,main=”图形元素设置演示”)
plot(1:30,main="图形元素设置演示")
plot(1:30,main="图形元素设置演示",sub = "zibiaoti")
plot(1:30)
# 安斯库姆四重奏
#
# define the data frame
anscombe <- data.frame(
x1 = c(10,8,13,9,11,14,6,4,12,7,5),
x2 = c(10,8,13,9,11,14,6,4,12,7,5),
x3 = c(10,8,13,9,11,14,6,4,12,7,5),
x4 = c(8,8,8,8,8,8,8,19,8,8,8),
y1 = c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68),
y2 = c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74),
y3 = c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73),
y4 = c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89)
)
# show results from four regression analyses
with(anscombe,print(summary(lm(y1~x1,data = anscombe))))
with(anscombe,print(summary(lm(y2~x2,data = anscombe))))
with(anscombe,print(summary(lm(y3~x3,data = anscombe))))
with(anscombe,print(summary(lm(y4~x4,data = anscombe))))
# place four plots on one page
# width and height is not neccessary
pdf(file = "fig_anscombe_R.pdf",width = 8.5, height = 8.5)
par(mfrow = c(2,2),mar = c(5.1,4.1,4.1,2.1))
with(anscombe, plot(x1,y1,xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x1", ylab = "y1"))
title("Set I")
with(anscombe, plot(x2,y2,xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x2", ylab = "y2"))
title("Set II")
with(anscombe, plot(x3,y3,xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x3", ylab = "y3"))
title("Set III")
with(anscombe, plot(x4,y4, xlim = c(2,20), ylim = c(2,14), pch = 19, col = "darkblue", cex = 1.5, las = 1, xlab = "x4", ylab = "y4"))
title("Set IV")
dev.off()
install.packages('quantmod')
require(quantmod)
library(quantmod)
getSymbols("GOOG",src="yahoo",from="2013-01-01", to='2013-04-24')
hist(rnorm(1000,0,1))
hist(rnorm(1000,0,1),col = "skyblue")
getwd()
install.packages("maps")
library(maps)
library("maps")
map()
map.cities()
hist(rnorm(1000,0,1),col = "skyblue")
x <- c(1,2,3)
y <- x+4
max(1,5,3)
help(mean)
args(mean)
example(mean)
x <- c(0:10, 50)
x
xm <- mean(x)
xm
RSiteSearch("canonical correlation")
pi
sqrt(2)
print(pi)
print(sqrt(2))
print(matrx)
print(matrix(c(1,4,3,23),2,2)）
print(matrix(c(1,4,3,23),2,2))
print(list("a","b","c"))\
print(list("a","b","c"))
print(list(c(1,2,3)))
print(list(c("a","b","c")))
ls()
ls()
aa = c(1,2,3)
aa
typeof(aa)
mode(aa)
history()
a <- 3
a == pi
a != pi
a < pi
a > pi
v <- c(3,pi,4)
w <- c(pi,pi,pi)
v == w
v != w
v < w
v >w
any(v >w)
all(v > w)
fib <- c(0,1,1,2,3,5,8,13,21,34)
fib
fib[1]
fib[2]
years <- c(1960,1964,1976,1994)
names(years) <- c("kennedy","Johnson","Carter","Clinton")
years
years["clinton"]
years["Clinton"]
getwd()
dfrm <- read.table("statisticians.txt")
dfrm <- read.table("statisticians.txt")
tb1 <- read.csv("table-data.csv")
View(tb1)
View(dfrm)
dfrm
tb1
tb1 <- read.csv("table-data.csv", as.is = TRUE)
str(tb1)
tb1
print(tb1)
write.csv(tb1, file = "table-data.csv",row.names = T)
library(XML)
url <- 'http://en.wikipedia.org/wiki/World_population'
tb1s <- readHTMLTable(url)
url <- "https://en.wikipedia.org/wiki/World_population"
tb1s <- readHTMLTable(url)
length(tb1s)
library(maps)
library('maps')
map()
# R语言的基本操作
# 1. 脚本编辑器与图形输出设备
hist(rnorm(1000,0,1),col = 'skyblue')
getwd()
map()
# 自定义函数
myfunc_cv <- function(x) {
cv <- sd(x)/mean(x)
return cv
}
# 自定义函数
myfunc_cv <- function(x){
cv <- sd(x)/mean(x)
return cv
}
myfunc_cv <- function(x){
cv <- sd(x)/mean(x)
return(cv)
}
a <- c(1,5,23,5,34)
myfunc_cv(a)
data()
CO2
View(CO2)
## 数据框就是一个数据表格，一行表示一个记录，一列表示一个变量
x1 <- c(1,2,3,4,5,6,7,8,9)
x2 <- c(10,11,12,13,14,15,16,17,18)
x <- data.frame(x1,x2)
x
x <- data.frame('重量'=x1,'运费' = x2)
x
x$'费率' <- x$'运费'/x$'重量'
names(x)
str(x)
x
write.table(CO2,file = "二氧化碳.txt")
write.csv(CO2,file = "二氧化碳.csv")
read.table(file = "二氧化碳.txt", header = TRUE)
# 最好指定一个名称#
carbon <- read.table(file = "二氧化碳.txt", header = TRUE)
carbon
View(cars)
help(cars)
head(cars)
tail(cars)
plot(cars)
plot(cars$dist, cars$speed)
plot(cars$speed, cars$dist)
windows()
par(mfrow = c(2,2))
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist~cars$speed,
main = "刹车距离与车速之间的关系",
xlab = "Speed (miles per hour)",
ylab = "Distance travelled (miles)",
xlim = c(0,30),
ylim = c(0,140),
xaxs = "i",
yaxs = "i",
col = "red",
pch = 19)
# 向量####
v <- v(98,78,88)
names(v) <- c("math","java","R")
v
# 向量####
v <- c(98,78,88)
names(v) <- c("math","java","R")
v
print(v["math"])
?as
showMethods("coerce")
d <- as.Date("2017-07-21")
d
mode(d)
length(d)
pi
pi[1]
pi[2]
length(pi)
A <- 1:6
dim(A)
dim(A)<-c(2,3)
A
B <- list(1,2,3,4,5,6)
dim(B)
dim(B) <- c(2,3)
B
D <- 1:12
dim(D)
dim(D) <- c(2,3,2)
D
v
mode(v)
v <- c(1,23)
newitem <- c(2,3)
v <- c(v,newitem)
v
v <- c(1,2,3)
v <- c(v,4)
v
w <- c(v,c(6,7,8,9))
w
years <- list(1960,1967,1999,2001)
years
years[[2]]
years[1]
cat(year[[1]])
cat(years[[1]])
cat(year[1])
cat(years[1])
lst
lst <- list("lwx",NULL,"qjk")
lst
lst[sapply(lst,is.null)] <- NULL
lst
print(tech.corr)
data()
c <- 1:12
c
dim(c) = c(3,4)
c
vec <- c[1,]
vec
vec <- c[,3]
vec
c[1,,drop = FALSE]
c[,3,drop = FALSE]
who
CO2
edit(CO2)
Car93
data()
library(MASS)
Cars93
split(Cars93$MPG.city,Cars93$Origin)
g <- split(Cars93$MPG.city,Cars93$Origin)
median(g[1])
median(g[[1]])
median(g[[2]])
s1 <- c(98,78,97,67,87,56,98,56,76,89)
s2 <- c(97,67,87,59,97,67,87,88)
s3 <- c(78,97,67,87,56,98,56,87,59,97,67,87)
s4 <- c(7,87,56,98,56,87,59,97,67,79)
scores <- list(s1,s2,s3,s4)
scores
lapply(scores,length)
sapply(score)
sapply(scores,length)
names(scores) <- c("S1","S2","S3","S4")
scores
lapply(scores,length)
sapply(scores,length)
sapply(scores,mean)
sapply(scores,sd)
sapply(scores,range)
tests <- lapp
tests <- lapply(scores, t.test)
tests
sapply(tests,function(t) t$conf.int)
length("Moe")
nchar("Moe")
s <- c("Moe","Larry","Curly")
s
length(s)
nchar(s)
paste("I","love","you")
paste("I","love","you",sep = "-")
paste("I","love","you",sep = "")
Sys.Date()
d <- as.Date("2010-03-15")
p <- as.POSIXct(d)
p$mday
p
p$mday
p["mdayt"]
p["mday"]
d$mday
d
p <- as.POSIXlt(d)
p$mday
choose(5,3)
choose(50,3)
combn(1:5,3)
combn(c("T1","T2","T3","T4","T5","T6"),4)
runif(1)
runif(10)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
runif(1,min = -3, max = 3)
rnorm(1)
set.seed(199)
runif(10)
set.seed(199)
runif(10)
years
years = 1900:2000
years
years = 1900:2017
years
sample(years,10)
sample(years,10)
sample(years,10,replace = TRUE)
sample(years,10,replace = TRUE)
sample(years,120,replace = TRUE)
sample(years,120)
sample(x, replace = TRUE)
sample(years, replace = TRUE)
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median(sample(years,replace = TRUE))
median <- numeric(100)
median
years = 1900:2017
median <- numeric(1000)
for (i in 1:1000){
median[i] <- median(sample(years,replace = TRUE))
}
median
ci <- quantile(median, c(0.025, 0.975))
cat("95% confidece interval is (", ci, ")\n")
sample(set, n, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 10, replace = TRUE)
sample(c("H","T"), 20, replace = TRUE)
sample(c(FALSE, TRUE), 20, replace = TRUE)
sample(c(FALSE,TRUE),20, replace = TRUE, prob = c(0.2, 0.8))
sample(1:10)
x <- seq(from=0, to=6, length.out = 100)
ylim <- c(0,0.6)
par(mfrow = c(2,2))
plot(x, dunif(x, min = 2, max = 4), main = "Uniform",type = 'l',ylim = ylim)
plot(x, dnorm(x, mean = 3, sd = 1), main = "Normal",type = 'l',ylim = ylim)
plot(x, dexp(x, rate = 1/2), main = "Exponential",type = 'l',ylim = ylim)
plot(x, dgamma(x, shape = 2, rate = 1), main = "Gamma",type = 'l',ylim = ylim)
x <- rnorm(-10,10)
x <- -100:100
x
list <- sample(x, 20, replace = TRUE)
list
mean(x<0)
x <- rnorm(50,mean = 100, sd =15)
x
t.test(x,mu=95)
t.test(x,mu=97)
t.test(x,mu=1.1)
t.test(x,mu=101)
t.test(x,mu=101.7607)
x
y
s1
s4
plot(s1,s4)
cars
plot(cars)
plot(cars)
plot
plot(cars,)
plot(cars,
main="cars:Speed vs. Stopping Distance(1920)",
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)")
plot(cars,
main="cars:Speed vs. Stopping Distance(1920)",
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)")
plot(cars,
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)"
type="n")
plot(cars,
xlab="Speed(MPH)",
ylab="Stopping Distance(ft)",
type="n")
grid()
points(cars)
iris
with(iris, plot(Petal.Length,Petal.Width))
with(iris, plot(Petal.Length,Petal.Width, pch = as.integer(Species)))
f <- factor(iris$Species)
with(iris, plot(Petal.Length,Petal.Width, pch = as.integer(f)))
legend(1.5,2.4, c("setosa","versicolor","virginica"), pch=1:3)
f <- factor(iris$Species)
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(1.5, 2.4, as.character(levels(f)),pch = as.integer(f))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,95,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,95,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(0.5,2.5,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
f <- factor(iris$Species)
with(iris, plot(Petal.Length, Petal.Width, pch = as.integer(f)))
legend(1.5,2.5,c("Estimate", "Lower conf lim","Upper conf lim"),
lty=c("solid","dashed","dotted"))
with(iris, )
library(faraway)
data(strongx)
install.packages(faraway)
install.packages("faraway")
library(faraway)
data(strongx)
strongx
m <- lm(crossx ~ energy, data = strongx)
plot(
)
plot(crossx ~ energy, data = strongx)
abline(m)
head(iris)
plot(iris[,1:4])
data(Cars93, package = "MASS")
coplot
Cars93
data(Cars93,package = "MASS")
coplot(Horsepower ~ MPG.city | Origin, data=Cars93)
airquality
head(airquality)
heights <- tapply(airquality$Temp,airquality$Month,mean)
heights
barplot(heights)
barplot(heights,
main = "Mean Temp .by Month",
names.arg =c("May","Jun","Jul","Aug","Sep"),
ylab = "Temp(deg.F")
